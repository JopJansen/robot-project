// Generated by gencpp from file robot_arm_pkg/SorterenGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_ARM_PKG_MESSAGE_SORTERENGOAL_H
#define ROBOT_ARM_PKG_MESSAGE_SORTERENGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_arm_pkg
{
template <class ContainerAllocator>
struct SorterenGoal_
{
  typedef SorterenGoal_<ContainerAllocator> Type;

  SorterenGoal_()
    : tf_frame()
    , doel_positie()  {
    }
  SorterenGoal_(const ContainerAllocator& _alloc)
    : tf_frame(_alloc)
    , doel_positie(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tf_frame_type;
  _tf_frame_type tf_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _doel_positie_type;
  _doel_positie_type doel_positie;





  typedef boost::shared_ptr< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SorterenGoal_

typedef ::robot_arm_pkg::SorterenGoal_<std::allocator<void> > SorterenGoal;

typedef boost::shared_ptr< ::robot_arm_pkg::SorterenGoal > SorterenGoalPtr;
typedef boost::shared_ptr< ::robot_arm_pkg::SorterenGoal const> SorterenGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator1> & lhs, const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator2> & rhs)
{
  return lhs.tf_frame == rhs.tf_frame &&
    lhs.doel_positie == rhs.doel_positie;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator1> & lhs, const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_arm_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe12904864f980fb89c80a0b6f0fc939";
  }

  static const char* value(const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe12904864f980fbULL;
  static const uint64_t static_value2 = 0x89c80a0b6f0fc939ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_arm_pkg/SorterenGoal";
  }

  static const char* value(const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"string tf_frame\n"
"string doel_positie\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tf_frame);
      stream.next(m.doel_positie);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SorterenGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_arm_pkg::SorterenGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_arm_pkg::SorterenGoal_<ContainerAllocator>& v)
  {
    s << indent << "tf_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tf_frame);
    s << indent << "doel_positie: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.doel_positie);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_ARM_PKG_MESSAGE_SORTERENGOAL_H
